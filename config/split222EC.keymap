#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>

#define ZMK_POINTING_DEFAULT_MOVE_VAL 800
#define ZMK_POINTING_DEFAULT_SCRL_VAL 120
#include <dt-bindings/zmk/pointing.h>

#include <input/processors.dtsi>

#define ONE 1
#define TWO 2
#define THREE 3
#define FOUR 4
#define FIVE 5
#define SIX 6
#define SEVEN 7
#define EIGHT 8

&mmv {
    delay-ms = <0>;
    trigger-period-ms = <10>;
    time-to-max-speed-ms = <0>;
    acceleration-exponent = <1>;
};

&mmv_input_listener {
warp {
    layers = <ONE>;
    input-processors = <&zip_xy_scaler 2 1>;
};
precision {
    layers = <TWO>;
    input-processors = <&zip_xy_scaler 1 4>;
};

/ {
    behaviors {
        rot_kp: sensor_rotate_kp {
            compatible = "zmk,behavior-sensor-rotate-var";
            #sensor-binding-cells = <2>;
            bindings = <&kp>, <&kp>;
        };

        mouse_click: mouse_button_kp {
            compatible = "zmk,behavior-sensor-rotate-var";
            #sensor-binding-cells = <2>;
            bindings = <&mkp>, <&mkp>;
        };

        mouse_mv: mouse_cursor_move {
            compatible = "zmk,behavior-sensor-rotate-var";
            #sensor-binding-cells = <2>;
            bindings = <&mmv>, <&mmv>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
                &mo 1 &mo 2 &mo 3 &mo 4
                &mo 5 &mo 6 &mo 7 &mo 8
            >;
        sensor-bindings = <&mouse_mv MOVE_UP MOVE_DOWN>;
        };

        ONE {
            bindings = <
                &kp N1      &kp LCTRL  &kp N1     &kp LCTRL
                &kp LSHIFT  &kp LALT   &kp LSHIFT &kp LALT 
            >;
        sensor-bindings = <&mouse_mv MOVE_UP MOVE_DOWN>;
        };

        TWO {
            bindings = <
                &kp N2      &kp LCTRL  &kp N2     &kp LCTRL
                &kp LSHIFT  &kp LALT   &kp LSHIFT &kp LALT 
            >;
        sensor-bindings = <&mouse_mv MOVE_UP MOVE_DOWN>;
        };


        THREE {
            bindings = <
                &kp N3      &kp LCTRL  &kp N3     &kp LCTRL
                &kp LSHIFT  &kp LALT   &kp LSHIFT &kp LALT 
            >;
        sensor-bindings = <&rot_kp MOVE_LEFT MOVE_RIGHT>;
        };

        FOUR {
            bindings = <
                &kp N4      &kp LCTRL  &kp N4     &kp LCTRL
                &kp LSHIFT  &kp LALT   &kp LSHIFT &kp LALT 
            >;
        sensor-bindings = <&rot_kp C_BRI_DEC C_BRI_INC>;
        };

        FIVE {
            bindings = <
                &kp N5      &kp LCTRL  &kp N5     &kp LCTRL
                &kp LSHIFT  &kp LALT   &kp LSHIFT &kp LALT 
            >;
        sensor-bindings = <&rot_kp C_PREV C_NEXT>;
        };

        SIX {
            bindings = <
                &kp N6      &kp LCTRL  &kp N6     &kp LCTRL
                &kp LSHIFT  &kp LALT   &kp LSHIFT &kp LALT 
            >;
        sensor-bindings = <&rot_kp LC(Z) LC(LS(Z))>;
        };

        SEVEN {
            bindings = <
                &kp N7      &kp LCTRL  &kp N7     &kp LCTRL
                &kp LSHIFT  &kp LALT   &kp LSHIFT &kp LALT 
            >;
        sensor-bindings = <&rot_kp LA(PG_DN) LA(PG_UP)>;
        };
        EIGHT {
            bindings = <
                &kp N7      &kp LCTRL  &kp N7     &kp LCTRL
                &kp LSHIFT  &kp LALT   &kp LSHIFT &kp LALT 
           >;
        sensor-bindings = <&rot_kp LA(LEFT) LA(RIGHT)>;
        };
    };
};
